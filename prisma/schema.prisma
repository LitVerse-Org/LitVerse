generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  email              String     @unique
  username           String     @unique
  password           String?
  phone              String?
  bio                String?
  posts              Post[]
  likes              Like[]
  // savedPosts         Post[]
  followedBy         Follower[] @relation("UserFollowers")
  following          Follower[] @relation("UserFollowing")
  // communities        Community[]
  comments           String?
  profileImgS3URL    String? // S3 URL for profile picture img
  coverImgS3URL      String? // S3 URL for cover art img
  backgroundImgS3URL String? // S3 URL for background art img
}

model Follower {
  id         Int      @id @default(autoincrement())
  userId     Int
  followerId Int
  createdAt  DateTime @default(now())
  user       User     @relation("UserFollowers", fields: [userId], references: [id])
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id])
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model Post {
  id        Int     @id @default(autoincrement())
  content   String // For Markdown-formatted text content like stories and poems
  mediaUrl  String? // S3 URL for images or videos
  mediaType String? // Type of media: 'image', 'video', 'none'
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  likes     Like[]
  tags      Tag[] @relation("PostToTag") // Establish many-to-many relation to Tag
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostToTag") // Establish many-to-many relation to Post
}

// model Comment {
//   id        Int     @id @default(autoincrement())
//   content   String
//   userId    Int
//   postId    Int
//   user      User    @relation(fields: [userId], references: [id])
//   post      Post    @relation(fields: [postId], references: [id])
//   createdAt DateTime @default(now())
// }

// add a model for Communities, which will be very similar to subreddits. Users will "join" communities.

// model Community {
//   id        Int     @id @default(autoincrement())
//   name      String  @unique
//   bio       String?
//   posts     Post[]
//   members   Member[]
//   profileImgS3URL    String? // S3 URL for profile picture img
//   coverImgS3URL      String? // S3 URL for cover art img
//   backgroundImgS3URL String? // S3 URL for background art img
//   createdAt DateTime @default(now())
// }
